@page "/books/create/"
@attribute [Authorize(Roles = Roles.Administrator)]
@inject IBookService _bookService
@inject IAuthorService _authorService
@inject NavigationManager _navigationManager

<h3>Create New Book</h3>

<EditForm Model="Book" OnValidSubmit="HandleBookCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
<div class="form-group">
    <label for="title">Book Title</label>
    <InputText @bind-Value="Book.Title" class="form-control" id="title" />
    <ValidationMessage For="@(() => Book.Title)" />
</div>
<br />
<div class="form-group">
    <label for="isbn">ISBN</label>
    <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
    <ValidationMessage For="@(() => Book.Isbn)" />
</div>
<br />
<div class="form-group">
    <label for="price">Price</label>
    <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
    <ValidationMessage For="@(() => Book.Price)" />
</div>
<br />
<div class="form-group">
    <label for="year">Year</label>
    <InputNumber @bind-Value="Book.Year" class="form-control" id="year" />
    <ValidationMessage For="@(() => Book.Year)" />
</div>
<br />
<div class="form-group">
    <label for="summary">Summary</label>
    <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
    <ValidationMessage For="@(() => Book.Summary)" />
</div>
<br />
<div class="form-group">
    <label for="author">Author</label>
    <InputSelect @bind-Value="Book.AuthorId" class="form-select" id="author">
        <option value="">-- Select --</option>
        @foreach (var author in Authors)
        {
            <option value="@author.Id">@author.FirstName @author.LastName</option>
        }
    </InputSelect>
    <ValidationMessage For="@(() => Book.AuthorId)" />
</div>
<br />

@code {

    private BookCreateDto Book = new BookCreateDto();
    private List<AuthorReadOnlyDto> Authors = new  List<AuthorReadOnlyDto> ();


    protected override async Task OnInitializedAsync()
    {
        var response = await _authorService.GetAuthors();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task HandleBookCreate()
    {
        var response = await _bookService.CreateBook(Book);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/books/");
    }

}
