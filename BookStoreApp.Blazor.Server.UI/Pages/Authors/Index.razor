@page "/authors/"

@inject IAuthorService _authorService
@inject IJSRuntime _js

<h3>Authors</h3>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading data...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="Administrator">
        <a class="btn btn-primary" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span>Create </a>
          </AuthorizeView>
        <br />
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Firstname</th>
                    <th>Lastname</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-book" aria-hidden="true"></span> Details </a>
                            <AuthorizeView Roles="Administrator">
                                <a class="btn btn-warning" href="/authors/edit/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span> Edit </a>
                                <button class="btn btn-danger" @onclick=@(() => Delete(@author.Id))> <span class="oi oi-delete" aria-hidden="true"></span> Delete </button>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<AuthorReadOnlyDto> Authors;

    // load a new Response object and success flag is true.
    // When initialised get the service call to fill response
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };
    protected override async Task OnInitializedAsync()
    {
        response = await _authorService.GetAuthors();
        if (response.Success)
        {
            Authors = response.Data;
        }

    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(a => a.Id == authorId);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete author: {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            var response = await _authorService.Delete(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
