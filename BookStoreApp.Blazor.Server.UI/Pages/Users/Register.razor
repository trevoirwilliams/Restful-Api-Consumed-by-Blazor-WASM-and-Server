@page "/users/register"
@inject IClient httpClient;
@inject NavigationManager navManager;

<h3>Register</h3>
<br />
@if (string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email: </label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(()=> RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="firstname">First name: </label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(()=> RegistrationModel.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastname">Last name: </label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(()=> RegistrationModel.LastName)" />
        </div>

        <div class="form-group">
            <label for="password">Password: </label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(()=> RegistrationModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
        {
            Role = "User"
        };
    string message = string.Empty;
    private async Task HandleRegistration()
    {
        // submit for to api, access API using httpClient

        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
             NavigateToLogin();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Message;
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }
}
